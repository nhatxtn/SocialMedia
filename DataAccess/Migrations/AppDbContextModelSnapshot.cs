// <auto-generated />
using System;
using DataAccess.Core.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Core.Entities.AccountStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AccountStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d92a50b-6d0a-46f1-9f55-53de6b585600"),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("cc751bfc-77b9-4a97-85d4-c88e1f3db4de"),
                            Name = "EmailConfirmed"
                        },
                        new
                        {
                            Id = new Guid("c4cc80c2-c5b1-4852-8f32-f59c6d5b2213"),
                            Name = "Banned"
                        });
                });

            modelBuilder.Entity("DataAccess.Core.Entities.AttachedPostCommentMediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<Guid>("PostCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostCommentId");

                    b.ToTable("AttachedPostCommentMedias", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.AttachedPostMediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("AttachedPostMedias", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.GroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.GroupMemberEntity", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupMembers", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.JoinGroupRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.ToTable("JoinGroupRequests", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.ParentChildPostCommentEntity", b =>
                {
                    b.Property<Guid>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChildCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParentCommentId", "ChildCommentId");

                    b.ToTable("ParentChildPostComments", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.PinPostEntity", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.HasKey("GroupId", "PostId", "CreatedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("PinPosts", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.PostCommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDirectlyComment")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.PostEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfLikes")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(32)");

                    b.HasKey("Id");

                    b.HasIndex("AccessTokenId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("AccessTokenId"), false);

                    b.HasIndex("UserId");

                    b.HasIndex("Value")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Value"), false);

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("1111aaaa-1111-aaaa-1111-aaaa1111aaaa"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1111aaaa-1111-aaaa-1111-aaaa1111aaaa"),
                            ConcurrencyStamp = "ddeac4e7-4c64-463c-ba5e-a9f3bd54dfc5",
                            CreatedAt = new DateTime(2024, 3, 19, 3, 15, 40, 328, DateTimeKind.Utc).AddTicks(9087),
                            CreatedBy = new Guid("1111aaaa-1111-aaaa-1111-aaaa1111aaaa"),
                            Name = "system",
                            NormalizedName = "SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("cc751bfc-77b9-4a97-85d4-c88e1f3db4de"),
                            ConcurrencyStamp = "8fd71d47-3f1d-4bc1-8c97-026d29825829",
                            CreatedAt = new DateTime(2024, 3, 19, 3, 15, 40, 328, DateTimeKind.Utc).AddTicks(9087),
                            CreatedBy = new Guid("1111aaaa-1111-aaaa-1111-aaaa1111aaaa"),
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("c4cc80c2-c5b1-4852-8f32-f59c6d5b2213"),
                            ConcurrencyStamp = "1c296420-bb73-40ee-8cde-d8f099c591df",
                            CreatedAt = new DateTime(2024, 3, 19, 3, 15, 40, 328, DateTimeKind.Utc).AddTicks(9087),
                            CreatedBy = new Guid("1111aaaa-1111-aaaa-1111-aaaa1111aaaa"),
                            Name = "group_member",
                            NormalizedName = "GROUP_MEMBER"
                        },
                        new
                        {
                            Id = new Guid("2d92a50b-6d0a-46f1-9f55-53de6b585600"),
                            ConcurrencyStamp = "4142dd1a-4348-40a6-af44-7a864bfdc989",
                            CreatedAt = new DateTime(2024, 3, 19, 3, 15, 40, 328, DateTimeKind.Utc).AddTicks(9087),
                            CreatedBy = new Guid("1111aaaa-1111-aaaa-1111-aaaa1111aaaa"),
                            Name = "group_manager",
                            NormalizedName = "GROUP_MANAGER"
                        });
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AccountStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(200)")
                        .HasDefaultValue("https://firebasestorage.googleapis.com/v0/b/comic-image-storage.appspot.com/o/blank-profile-picture-973460_1280.png?alt=media&token=2309abba-282c-4f81-846e-6336235103dc");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("RemovedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("1111aaaa-1111-aaaa-1111-aaaa1111aaaa"));

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("1111aaaa-1111-aaaa-1111-aaaa1111aaaa"));

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserFriendRequestEntity", b =>
                {
                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.HasKey("FriendId", "CreatedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("UserFriendRequests", (string)null);
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserLikePostEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserLikePosts", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserToken<Guid>");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.RoleClaimEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>");

                    b.ToTable("RoleClaims", (string)null);

                    b.HasDiscriminator().HasValue("RoleClaimEntity");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserClaimEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>");

                    b.ToTable("UserClaims", (string)null);

                    b.HasDiscriminator().HasValue("UserClaimEntity");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserLoginEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>");

                    b.ToTable("UserLogins", (string)null);

                    b.HasDiscriminator().HasValue("UserLoginEntity");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserRoleEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator().HasValue("UserRoleEntity");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserTokenEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("DATETIME2");

                    b.ToTable("UserTokens", (string)null);

                    b.HasDiscriminator().HasValue("UserTokenEntity");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.AttachedPostCommentMediaEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.PostCommentEntity", "PostComment")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostComment");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.AttachedPostMediaEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.PostEntity", "Post")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.GroupEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", "Creator")
                        .WithMany("CreatedGroups")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.GroupMemberEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.GroupEntity", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.UserEntity", "Member")
                        .WithMany("JoinGroupMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.RoleEntity", "Role")
                        .WithMany("GroupMembers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Member");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.JoinGroupRequestEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", "Creator")
                        .WithMany("CreatedJoinGroupRequests")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.GroupEntity", "Group")
                        .WithMany("JoinGroupRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.ParentChildPostCommentEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.PostCommentEntity", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.PinPostEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", "Creator")
                        .WithMany("UserPinPosts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.GroupEntity", "Group")
                        .WithMany("PinPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.PostEntity", "Post")
                        .WithMany("PinPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.PostCommentEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", "Creator")
                        .WithMany("UserComments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.PostEntity", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.PostEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", "Creator")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.GroupEntity", "Group")
                        .WithMany("GroupPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.RoleEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", null)
                        .WithMany("CreatedRoles")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.AccountStatusEntity", "AccountStatus")
                        .WithMany("Users")
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountStatus");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserFriendRequestEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", "Creator")
                        .WithMany("CreatedFriendRequests")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.UserEntity", "Friend")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Friend");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserLikePostEntity", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.PostEntity", "Post")
                        .WithMany("UserLikePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.UserEntity", "User")
                        .WithMany("UserLikePosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Core.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Core.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Core.Entities.AccountStatusEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.GroupEntity", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("GroupPosts");

                    b.Navigation("JoinGroupRequests");

                    b.Navigation("PinPosts");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.PostCommentEntity", b =>
                {
                    b.Navigation("AttachedMedias");

                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.PostEntity", b =>
                {
                    b.Navigation("AttachedMedias");

                    b.Navigation("PinPosts");

                    b.Navigation("PostComments");

                    b.Navigation("UserLikePosts");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.RoleEntity", b =>
                {
                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("DataAccess.Core.Entities.UserEntity", b =>
                {
                    b.Navigation("CreatedFriendRequests");

                    b.Navigation("CreatedGroups");

                    b.Navigation("CreatedJoinGroupRequests");

                    b.Navigation("CreatedPosts");

                    b.Navigation("CreatedRoles");

                    b.Navigation("JoinGroupMembers");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserComments");

                    b.Navigation("UserLikePosts");

                    b.Navigation("UserPinPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
